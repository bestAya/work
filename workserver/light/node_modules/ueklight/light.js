"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var http = require("http");
var config = require("./config.js");
var path = require("path");
var fs = require("fs");
var ejs = require("./ejs");
var async = require("async");

var light = function () {
    function light() {
        _classCallCheck(this, light);

        this.getInfo = [];
        this.postInfo = [];
        this.useInfo = [];
        this.rootUrl = process.cwd();
    }

    _createClass(light, [{
        key: "listen",
        value: function listen(port, fn) {
            var _this = this;

            if (arguments.length == 0) {
                var port = config.port;
                var fn = function fn() {
                    console.log(port);
                };
            } else if (arguments.length == 1) {
                if (typeof port == "number") {
                    var port = port;
                    var fn = function fn() {
                        console.log(port);
                    };
                } else if (typeof port == "function") {
                    var fn = port;
                    var port = config.port;
                } else {
                    var port = config.port;
                    var fn = function fn() {
                        console.log(port);
                    };
                }
            } else if (arguments.length == 2) {
                var port = port;
                var fn = fn;
            }

            this.port = port;

            http.createServer(function (req, res) {
                var methods = req.method;
                var ext = path.extname(req.url);
                if (ext && config.staticType.indexOf(ext) > -1) {
                    //console.log(req);
                    var dir = path.join(path.resolve(config.staticDir), req.url);

                    res.setHeader("content-type", config.type[ext] + ";charset=utf-8");
                    fs.stat(dir, function (err) {
                        if (err) {
                           var dir1=path.resolve("."+req.url);
                           fs.stat(dir1,function(err) {
                             if(err){
                                 res.writeHead(404);
                                 res.end("err");
                             }else{
                                 fs.createReadStream(dir1).pipe(res);
                             }
                           })
                        } else {
                            fs.createReadStream(dir).pipe(res);
                        }
                    });
                } else {
                    _this.run(req.method, req, res);
                }
            }).listen(port, function () {
                if (fn) {
                    fn();
                }
            });
        }
    }, {
        key: "run",
        value: function run(type, req, res) {
            var _this2 = this;

            var url = req.url;

            if (url == "/favicon.ico") {
                res.end();
            } else {

                /*post data end
                    保证我们访问  中间件的内容的时候，保证中间件都加载成功了
                 异步*  为了动态的路由*/

                async.series([function (next) {
                    //插件
                    var num = 0;
                    if (_this2.useInfo.length == 0) {
                        var num = -1;
                        next();
                    } else {

                        async.eachSeries(_this2.useInfo, function (item, next1) {
                            item(req, res, next1);
                        }, function () {
                            next();
                        });
                    }
                }], function () {
                    _this2.extend(req, res);
                    _this2.request(req, res, type, url);
                });

                /*
                             new Promise((reslove,reject)=>{
                                 //插件
                                 var num=0;
                                 if(this.useInfo.length==0){
                                     var num=0;
                                     reslove();
                                 }else{
                                 for(var i=0;i<this.useInfo.length;i++){
                
                                     new Promise((reslove1,reject1)=>{
                                         this.useInfo[i](req,res,reslove1);
                                     }).then(()=>{
                                            num++;
                                            if(num==i){
                                                reslove();
                                            }
                                     })
                
                                 }}
                
                             }).then( ()=> {
                                 this.extend(req, res);
                                 this.request(req,res,type,url)
                             })
                 */
            }
        }
    }, {
        key: "request",
        value: function request(req, res, type, url) {
            var _this3 = this;

            res.sendState = "ok";
            if (type == "GET") {
                var arr = this.getInfo;
            } else if (type == "POST") {
                var arr = this.postInfo;
            }
            var flag = true;
            for (var i = 0; i < arr.length; i++) {
                var reg = eval(arr[i].url);
                if (reg.test(url)) {
                    this.current = i;
                    flag = false;
                    req.params = {};
                    var result = reg.exec(url);
                    for (var j = 0; j < result.length; j++) {
                        req.params[arr[i].attr[j]] = result[j + 1];
                    }
                    arr[i].callback(req, res, function () {
                        _this3.next(req, res);
                    });
                    break;
                }
            }

            if (flag) {
                res.end("err");
            }
        }
    }, {
        key: "next",
        value: function next(req, res) {
            var nextIndex = this.current + 1;
            var nextInfo = this.getInfo[nextIndex];
            res.writeHead(302, { location: nextInfo.originUrl });
            res.end();
        }
    }, {
        key: "get",
        value: function get(url, fn) {
            this.saveInfo(url, fn, "get");
        }
    }, {
        key: "post",
        value: function post(url, fn) {
            this.saveInfo(url, fn, "post");
        }
    }, {
        key: "all",
        value: function all(url, fn) {
            this.saveInfo(url, fn, "get");
            this.saveInfo(url, fn, "post");
        }
    }, {
        key: "saveInfo",
        value: function saveInfo(url, fn, type) {
            var infoArr = type == "get" ? this.getInfo : this.postInfo;
            //路由的匹配
            var arr = url.match(/:([^\/]+)/g) || [];
            arr = arr.map(function (item) {
                return item.substr(1);
            });
            var str = url.replace(/:[^\/]+/g, "([^\/]+)");
            str = str.replace(/\//g, '\\/');
            str = "/^" + str + '[\\/]?(?:\\?.*)?$/';
            var obj = {};
            obj["url"] = str;
            obj["originUrl"] = url;
            obj.callback = fn;
            obj.attr = arr;
            infoArr.push(obj);
        }
    }, {
        key: "extend",
        value: function extend(req, res) {
            var _this4 = this;

            res.redirect = function (url) {
                res.writeHead(302, {
                    "location": url
                });
                res.end();
            };
            res.send = function (message) {
                res.setHeader("content-type", "text/html;charset=utf-8");
                res.end(message);
            };
            res.sendFile = function (url) {
                var fullpath = path.join(_this4.rootUrl, url);
                fs.stat(fullpath, function (err) {
                    if (err) {
                        res.end(err.toString());
                    } else {
                        fs.createReadStream(fullpath).pipe(res);
                    }
                });
            };

            res.render = function (url, data) {
                var url = path.join(path.resolve(config.views), url);
                fs.readFile(url, function (err, data1) {
                    if (err) {
                        res.writeHead(404);
                        res.end();
                    } else {
                        res.end(ejs(data1.toString(), data));
                    }
                });
            };

            res.download = function (url) {
                var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "download" + Math.random();

                var url = path.join(_this4.rootUrl, url);
                res.setHeader("Content-Disposition", "attachment; filename=" + name);
                res.setHeader("Content-Type", "octet-stream");
                fs.createReadStream(url).pipe(res);
            };
        }
    }, {
        key: "use",
        value: function use(fn) {
            this.useInfo.push(fn);
        }
    }]);

    return light;
}();

var obj = new light();

function fn() {
    return obj;
}

fn.Router = function () {
    return obj;
};

module.exports = fn;
//# sourceMappingURL=light.js.map