var fs=require("fs");
var pathObj=require("path");
module.exports=function(params){
    var params=params||{};
    return function (req,res,reslove) {
        var chunks = [];
        var size = 0;
        if(req.headers["content-type"]&&req.headers["content-type"].indexOf("multipart/form-data")>-1) {
            req.on('data', function (chunk) {
                chunks.push(chunk);
                size += chunk.length;
            });

            req.on("end", function () {
                var buffer = Buffer.concat(chunks, size);
                if (!size) {
                    res.writeHead(404);
                    res.end('');
                    return;
                }



                var rems = [];

                //根据\r\n分离数据和报头
                for (var i = 0; i < buffer.length; i++) {
                    var v = buffer[i];
                    var v2 = buffer[i + 1];
                    if (v == 13 && v2 == 10) {
                        rems.push(i);
                    }
                }

                //文件信息
                var picmsg_1 = buffer.slice(rems[0] + 2, rems[1]).toString();
                var filename = picmsg_1.match(/filename=".*"/g)[0].split('"')[1];

                //文件数据
                var nbuf = buffer.slice(rems[3] + 2, rems[rems.length - 2]);


                var saveurl=params.saveurl||"upload";

                var outname=params.filename?params.filename()+filename:filename;

                var path = pathObj.join(pathObj.resolve(saveurl) , outname);
                fs.writeFileSync(path, nbuf);
                console.log("保存" + outname + "成功");
                res.upInfo={};
                res.upInfo.path=path;
                res.upInfo.size=size;
                res.upInfo.relPath=saveurl+"/"+outname;
                reslove();
            });
        }else{
            reslove();
        }

    }
}